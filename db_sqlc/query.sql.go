// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package db_sqlc

import (
	"context"
)

const getDetailsForLogin = `-- name: GetDetailsForLogin :one
SELECT uuid, username, email, phone, password, created_at FROM users WHERE username = ? OR email = ?
`

type GetDetailsForLoginParams struct {
	Username string
	Email    string
}

func (q *Queries) GetDetailsForLogin(ctx context.Context, arg GetDetailsForLoginParams) (User, error) {
	row := q.db.QueryRowContext(ctx, getDetailsForLogin, arg.Username, arg.Email)
	var i User
	err := row.Scan(
		&i.Uuid,
		&i.Username,
		&i.Email,
		&i.Phone,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}

const isEmailTaken = `-- name: IsEmailTaken :one
SELECT EXISTS(SELECT 1 FROM users WHERE email = ?)
`

func (q *Queries) IsEmailTaken(ctx context.Context, email string) (bool, error) {
	row := q.db.QueryRowContext(ctx, isEmailTaken, email)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const isPhoneTaken = `-- name: IsPhoneTaken :one
SELECT EXISTS(SELECT 1 FROM users WHERE phone = ?)
`

func (q *Queries) IsPhoneTaken(ctx context.Context, phone string) (bool, error) {
	row := q.db.QueryRowContext(ctx, isPhoneTaken, phone)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const isUsernameTaken = `-- name: IsUsernameTaken :one
SELECT EXISTS(SELECT 1 FROM users WHERE username = ?)
`

func (q *Queries) IsUsernameTaken(ctx context.Context, username string) (bool, error) {
	row := q.db.QueryRowContext(ctx, isUsernameTaken, username)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const registerUser = `-- name: RegisterUser :exec
INSERT INTO users (uuid, username, email, phone, password) VALUES
    (?, ?, ?, ?, ?)
`

type RegisterUserParams struct {
	Uuid     string
	Username string
	Email    string
	Phone    string
	Password string
}

func (q *Queries) RegisterUser(ctx context.Context, arg RegisterUserParams) error {
	_, err := q.db.ExecContext(ctx, registerUser,
		arg.Uuid,
		arg.Username,
		arg.Email,
		arg.Phone,
		arg.Password,
	)
	return err
}
